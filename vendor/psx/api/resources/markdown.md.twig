{# Twig template which generates a markdown representation of a resource #}
{% import _self as me %}
# {{ resource.path }}
{% if resource.description %}
{{ resource.description }}
{% endif %}
{% if resource.pathParameters %}
### Path-Parameters
{{ me.render_property(resource.pathParameters) }}
{% endif %}
{% for methodName, method in resource.methods %}
## {{ methodName }} {% if resource.operationId %}`{{ method.operationId }}`{% endif %}

{% if method.description %}
{{ method.description }}
{% endif %}
{% if method.queryParameters %}
### Query-Parameters
{{ me.render_property(method.queryParameters) }}
{% endif %}
{% if method.request %}
### Request
{{ me.render_schema(method.request) }}
{% endif %}
{% for statusCode, response in method.responses %}
### Response - {{ statusCode }}:
{{ me.render_schema(response) }}
{% endfor %}
{% endfor %}
{% macro render_property(property) %}
{% import _self as me %}
{% set childs = [] %}
<a name="{{ property.constraintId }}"></a>
##### {{ property.title ?: 'Object' }}
{% if property.description %}
{{ property.description }}
{% endif %}
{# object properties #}
{% if property.minProperties %}
* Min-Properties: {{ property.minProperties }}
{% endif %}
{% if property.maxProperties %}
* Max-Properties: {{ property.maxProperties }}
{% endif %}
{% if property.required %}
* Required: `{{ property.required|json_encode|raw }}`
{% endif %}
{% if property.properties %}
* Properties:
{% for name, schema in property.properties %}
  * `{{ name }}`:
{{ me.render_object_property(schema) }}{% set childs = childs|merge([schema]) %}
{% endfor %}
{% endif %}
{% if property.patternProperties %}
* Pattern-Properties:
{% for pattern, schema in property.patternProperties %}
  * `{{ pattern }}`:
{{ me.render_object_property(schema) }}{% set childs = childs|merge([schema]) %}
{% endfor %}
{% endif %}
{% if property.additionalProperties is same as(false) %}
* Additional-Properties: No
{% elseif property.additionalProperties is same as(true) %}
* Additional-Properties: Yes
{% elseif property.additionalProperties %}
* Additional-Properties:
{{ me.render_object_property(property.additionalProperties) }}{% set childs = childs|merge([property.additionalProperties]) %}
{% endif %}
{% if childs %}
{% for schema in childs %}
{% if schema.hasConstraints %}
{% if schema.properties or schema.patternProperties or schema.additionalProperties %}
{{ me.render_property(schema) }}
{% elseif schema.items %}
{{ me.render_property(schema.items) }}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endmacro %}

{% macro render_object_property(schema) %}
{% import _self as me %}
{% if schema.properties or schema.patternProperties or schema.additionalProperties %}
* [{{ schema.title ?: 'Object' }}](#{{ schema.constraintId }})
{% elseif schema.items %}
{{ me.render_constraints(schema) }}    * __Items__:
    {{ me.render_object_property(schema.items) }}
{% else %}{{ me.render_constraints(schema) }}{% endif %}
{% endmacro %}

{% macro render_combination_property(schemas) %}
{% import _self as me %}
{% for schema in schemas %}
{{ me.render_object_property(schema) }}
{% endfor %}
{% endmacro %}

{% macro render_constraints(property) %}
{# common properties #}
{% if property.type %}
    * Type: {{ property.type }}
{% endif %}
{% if property.format %}
    * Format: {{ property.format }}
{% endif %}
{% if property.enum %}
    * Enum: `{{ property.enum|json_encode|raw }}`
{% endif %}
{# string properties #}
{% if property.pattern %}
    * Pattern: `{{ property.pattern }}`
{% endif %}
{% if property.minLength %}
    * Min-Length: {{ property.minLength }}
{% endif %}
{% if property.maxLength %}
    * Max-Length: {{ property.maxLength }}
{% endif %}
{# number properties #}
{% if property.minimum %}
    * Minimum: {{ property.minimum }}
{% endif %}
{% if property.maximum %}
    * Maximum: {{ property.maximum }}
{% endif %}
{% if property.exclusiveMinimum %}
    * Exclusive-Minimum: {{ property.exclusiveMinimum ? 'Yes' : 'No' }}
{% endif %}
{% if property.exclusiveMaximum %}
    * Exclusive-Maximum: {{ property.exclusiveMaximum ? 'Yes' : 'No' }}
{% endif %}
{% if property.multipleOf %}
    * Multiple-Of: {{ property.multipleOf }}
{% endif %}
{# array properties #}
{% if property.minItems %}
    * Min-Items: {{ property.minItems }}
{% endif %}
{% if property.maxItems %}
    * Max-Items: {{ property.maxItems }}
{% endif %}
{% if property.uniqueItems %}
    * Unique-Items: {{ property.uniqueItems ? 'Yes' : 'No' }}
{% endif %}
{% endmacro %}

{% macro render_schema(schema) %}
{% import _self as me %}
{{ me.render_property(schema.definition) }}
{% endmacro %}
